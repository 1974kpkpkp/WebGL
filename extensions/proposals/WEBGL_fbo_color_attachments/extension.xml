<?xml version="1.0"?>

<proposal href="proposals/WEBGL_fbo_color_attachments/">
  <name>WEBGL_fbo_color_attachments</name>
  <contact>
    <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL working group</a> (public_webgl 'at' khronos.org)
  </contact>
  <contributors>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>
  <number>14</number>
  <depends>
    <api version="1.0.1"/>
  </depends>
  <overview>
    <p>
    This extension adds multiple framebuffer color attachment points. When enabled:
    </p>
    <features>
      <feature>
      <code>getParameter</code> accepts <code>MAX_COLOR_ATTACHMENTS</code> and returns a platform dependent value of 1 through 16.
      </feature>
      <feature>
      <code>framebufferRenderbuffer</code> and <code>framebufferTexture2D</code> accept <code>COLOR_ATTACHMENT0</code> through <code>COLOR_ATTACHMENT15</code>
      as possible valid attachment parameters. If an attachment greater than or equal to the value returned by <code>getParameter(MAX_COLOR_ATTACHMENTS)</code>
      is specified an INVALID_VALUE error is generated.
      </feature>
      <feature>
      The <code>WEBGL_fbo_color_attachments</code> preprocessor directive will be defined to 1 for GLSL shaders.
      </feature>
      <feature>
      The <code>#extension</code> <code>WEBGL_fbo_color_attachments</code> is accepted in GLSL shaders and enables referencing <code>gl_FragData[0]</code> through <code>gl_FragData[n]</code> where n
      is 1 less than the value returned by <code>getParameter(MAX_COLOR_ATTACHMENTS)</code>. Referencing <code>gl_FragData[n]</code> where n is greater then the number of supported attachments
      will generate a GLSL compile or linker error.
      </feature>
    </features>
  </overview>
  <issues>
    <ul>
      <li>
          <div>Q: Does this extension allow you to render to the backbuffer with multiple render targets?</div>
          <div>A: No, that requires a different extension. This extension only handles framebuffers with multiple render target.</div>
      </li>
      <li>
          <div>Q: Can the multiple attachments be different dimensions?</div>
          <div>A: No. If the set of attachments attached to a framebuffer are not all the same dimensions
                  the WebGL implemention is required to return <code>FRAMEBUFFER_UNSUPPORTED</code> for <code>checkFramebufferStatus</code>
                  and generate <code>INVALID_FRAMEBUFFER_OPERATION</code> for all rendering and reading commands. (eg. <code>drawArrays</code>,
                  <code>drawElements</code>, <code>clear</code>, <code>readPixels</code>, <code>copyTexImage2D</code>, etc..)
          </div>
      </li>
      <li>
          <div>Q: Are any set of possible color attachments required to work?</div>
          <div>A: No. An implementation can reject any set of attachments. For invalid combinations
                  the implemention is required to return <code>FRAMEBUFFER_UNSUPPORTED</code> for <code>checkFramebufferStatus</code>
                  and generate <code>INVALID_FRAMEBUFFER_OPERATION</code> for all rendering and reading commands. (eg. <code>drawArrays</code>,
                  <code>drawElements</code>, <code>clear</code>, <code>readPixels</code>, <code>copyTexImage2D</code>, etc..)
          </div>
      </li>
      <li>
          <div>Q: Are there any restrictions on indexing gl_FragData?</div>
          <div>A: Yes, the same restrictions apply as when referencing uniform sampler arrays as specified in the GLSL Specification 1.0.17 Appendix A Section 5. Specifically
          only <i>constant-index-expressions</i> are allowed.</div>
      </li>
    </ul>
  </issues>
  <idl>
interface WEBGL_fbo_color_attachments {
    const GLenum COLOR_ATTACHMENT0   = 0x8CE0;
    const GLenum COLOR_ATTACHMENT1   = 0x8CE1;
    const GLenum COLOR_ATTACHMENT2   = 0x8CE2;
    const GLenum COLOR_ATTACHMENT3   = 0x8CE3;
    const GLenum COLOR_ATTACHMENT4   = 0x8CE4;
    const GLenum COLOR_ATTACHMENT5   = 0x8CE5;
    const GLenum COLOR_ATTACHMENT6   = 0x8CE6;
    const GLenum COLOR_ATTACHMENT7   = 0x8CE7;
    const GLenum COLOR_ATTACHMENT8   = 0x8CE8;
    const GLenum COLOR_ATTACHMENT9   = 0x8CE9;
    const GLenum COLOR_ATTACHMENT10  = 0x8CEA;
    const GLenum COLOR_ATTACHMENT11  = 0x8CEB;
    const GLenum COLOR_ATTACHMENT12  = 0x8CEC;
    const GLenum COLOR_ATTACHMENT13  = 0x8CED;
    const GLenum COLOR_ATTACHMENT14  = 0x8CEE;
    const GLenum COLOR_ATTACHMENT15  = 0x8CEF;

    const GLenum MAX_COLOR_ATTACHMENTS = 0x8CDF;
};
  </idl>
  <history>
    <revision date="2012/03/20">
      <change>Initial revision.</change>
    </revision>
  </history>
</proposal>
