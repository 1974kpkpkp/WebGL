<?xml version="1.0"?>

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:import href="rev_utils.xsl" />

<xsl:output method="html" />

<xsl:template match="extension">
  <xsl:call-template name="ext_page">
    <xsl:with-param name="spec_type" select="'Extension Specification'" />
    <xsl:with-param name="css" select="concat($basepath,'/resources/Khronos-Final.css')" />
  </xsl:call-template>
</xsl:template>

<xsl:template match="draft">
  <xsl:call-template name="ext_page">
    <xsl:with-param name="spec_type" select="'Extension Draft Specification'" />
    <xsl:with-param name="css" select="concat($basepath,'/resources/Khronos-WD.css')" />
  </xsl:call-template>
</xsl:template>

<xsl:template name="ext_page">
  <xsl:param name="spec_type" />
  <xsl:param name="css" />
  <xsl:variable name="title">
    <xsl:text>WebGL </xsl:text>
    <xsl:value-of select="name" />
    <xsl:text> </xsl:text><xsl:value-of select="$spec_type" />
  </xsl:variable>
  <xsl:comment>AUTOGENERATED FILE - DO NOT EDIT - SEE Makefile</xsl:comment>
  <html lang="en">
    <head>
      <meta http-equiv="content-type" content="text/html; charset=utf-8" />
      <title><xsl:value-of select="$title" /></title>
      <link rel="alternate" type="text/xml" href="extension.xml" />
      <link rel="stylesheet" type="text/css" href="{$css}" />
    </head>
    <body>
      <xsl:call-template name="logo" />

      <h1><xsl:value-of select="$title" /></h1>
      
      <h2 class="no-toc">Name</h2>
      <p> <xsl:value-of select="name" /> </p>

      <h2 class="no-toc">Contact</h2>
      <p> <xsl:copy-of select="contact/node()" /> </p>

      <h2 class="no-toc">Contributors</h2>
      <xsl:for-each select="contributors/contributor">
        <p> <xsl:copy-of select="node()" /> </p>
      </xsl:for-each>

      <xsl:if test="status">
        <h2 class="no-toc">Status</h2>
        <p> <xsl:copy-of select="status/node()" /> </p>
      </xsl:if>

      <h2 class="no-toc">Version</h2>
      <p> Last modified date: <xsl:call-template name="last_mod" /> <br />
          Revision: <xsl:call-template name="last_rev" />
      </p>

      <h2 class="no-toc">Number</h2>
      <p> WebGL extension #<xsl:value-of select="number" /> </p>

      <h2 class="no-toc">Dependencies</h2>
      <xsl:apply-templates select="depends" />

      <h2 class="no-toc">Overview</h2>
      <xsl:apply-templates select="overview" mode="overview" />

      <xsl:if test="aliases">
        <h2 class="no-toc">Alias Name Strings (for draft extensions)</h2>
        <ul><xsl:for-each select="aliases/alias">
          <li> <xsl:copy-of select="node()" /> </li>
        </xsl:for-each></ul>
      </xsl:if>

      <h2 class="no-toc">IDL</h2>
      <p>
<pre class="idl">
<xsl:value-of select="idl" />
</pre>
      </p>

      <xsl:if test="ipstatus">
        <h2 class="no-toc">IP Status</h2>
        <xsl:copy-of select="ipstatus/node()" />
      </xsl:if>

      <xsl:if test="newfun">
        <h2 class="no-toc">New Functions</h2>
        <xsl:apply-templates select="newfun" mode="newfun" />
      </xsl:if>

      <xsl:if test="newtypes">
        <h2 class="no-toc">New Types</h2>
        <xsl:copy-of select="newtypes/node()" />
      </xsl:if>

      <xsl:if test="newtok">
        <h2 class="no-toc">New Tokens</h2>
        <xsl:apply-templates select="newtok" mode="newfun" />
      </xsl:if>

      <xsl:if test="additions">
        <h2 class="no-toc">Additions to Chapters of the OpenGL ES 2.0 Specification</h2>
        <xsl:copy-of select="additions/node()" />
      </xsl:if>

      <xsl:if test="errors">
        <h2 class="no-toc">Errors</h2>
        <xsl:copy-of select="errors/node()" />
      </xsl:if>

      <xsl:if test="newstate">
        <h2 class="no-toc">New State</h2>
        <xsl:copy-of select="newstate/node()" />
      </xsl:if>

      <xsl:if test="newimplstate">
        <h2 class="no-toc">New Implementation-Dependent State</h2>
        <xsl:copy-of select="newimplstate/node()" />
      </xsl:if>

      <xsl:if test="samplecode">
        <h2 class="no-toc">Sample Code</h2>
        <xsl:copy-of select="samplecode/node()" />
      </xsl:if>

      <xsl:if test="tests">
        <h2 class="no-toc">Conformance Tests</h2>
        <xsl:copy-of select="tests/node()" />
      </xsl:if>

      <xsl:if test="security">
        <h2 class="no-toc">Security Considerations</h2>
        <xsl:copy-of select="security/node()" />
      </xsl:if>

      <xsl:if test="issues">
        <h2 class="no-toc">Issues</h2>
        <xsl:copy-of select="issues/node()" />
      </xsl:if>

      <h2 class="no-toc">Revision History</h2>
      <xsl:apply-templates select="history/revision">
        <xsl:sort select="@date" />
      </xsl:apply-templates>

    </body>
  </html>
</xsl:template>
  
<xsl:template name="logo">
  <xsl:comment>begin-logo</xsl:comment>
  <div class="left">
    <a href="http://webgl.org/"><img alt="WebGL" height="72" src="{concat($basepath,'/resources/WebGL-Logo.png')}" width="156" /></a>
  </div>
  <div class="right">
    <a href="http://khronos.org/"><img alt="Khronos" height="60" src="{concat($basepath,'/resources/KhronosGroup-3D.png')}" width="220" /></a>
  </div>
  <div style="clear: both;"></div>
  <br></br>
  <xsl:comment>end-logo</xsl:comment>
</xsl:template>

<xsl:template match="api">
  <p> Written against the WebGL API <xsl:value-of select="@version"/> specification. </p>
</xsl:template>

<xsl:template match="overview" mode="overview">
  <xsl:apply-templates select="node()" mode="overview" />
</xsl:template>
<xsl:template match="mirrors" mode="overview">
  <p> This extension exposes the
  <a><xsl:attribute name="href"><xsl:value-of select="@href" /></xsl:attribute>
  <xsl:value-of select="@name"/></a> functionality to
  <xsl:choose>
    <xsl:when test="count(addendum)=0">
      WebGL. There are no WebGL-specific behavioral changes.
    </xsl:when>
    <xsl:otherwise>
      WebGL. The following WebGL-specific behavioral changes apply:
    <ul>
      <xsl:for-each select="addendum">
        <li><xsl:copy-of select="node()" /></li>
    </xsl:for-each>
    </ul>
    </xsl:otherwise>
  </xsl:choose>
  Consult the above extension for documentation, issues, and new functions and enumerants.
  </p>
</xsl:template>
<xsl:template match="features" mode="overview">
  <p> When this extension is enabled: </p>
  <ul>
    <xsl:for-each select="feature">
      <li>
        <xsl:choose>
          <xsl:when test="glsl/function">
            <xsl:text>The built-in </xsl:text>
            <xsl:choose>
              <xsl:when test="count(glsl/function)=1">function </xsl:when>
              <xsl:otherwise>functions </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="glsl/function">
              <xsl:choose>
                <xsl:when test="last()=1">
                  <code><xsl:call-template name="fun_sig"/></code>
                  <xsl:text> is </xsl:text>
                </xsl:when>
                <xsl:when test="position()=last()">
                  <xsl:text>and </xsl:text>
                  <code><xsl:call-template name="fun_sig"/></code>
                  <xsl:text> are </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <code><xsl:call-template name="fun_sig"/></code>
                  <xsl:text>, </xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
            <xsl:text>available </xsl:text>
            <xsl:if test="count(glsl/stage)>0">
              <xsl:text>in </xsl:text>
              <xsl:for-each select="glsl/stage">
                <xsl:choose>
                  <xsl:when test="last()=1">
                    <xsl:value-of select="@type"/>
                  </xsl:when>
                  <xsl:when test="position()=last()">
                    <xsl:text>and </xsl:text>
                    <xsl:value-of select="@type"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="@type"/><xsl:text>, </xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:for-each>
              <xsl:text> shaders </xsl:text>
            </xsl:if>
            <xsl:text>if the following directive is added to the shader:</xsl:text>
<pre>
#extension <xsl:value-of select="glsl/@extname"/> : enable
</pre>
          </xsl:when>
          <xsl:when test="glsl/macro">
            <xsl:text>The following macro </xsl:text>
            <xsl:choose>
              <xsl:when test="count(glsl/macro)=1">
                <xsl:text>definition is available:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>definitions are available:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
<pre>
              <xsl:for-each select="glsl/macro">
#define <xsl:value-of select="@name"/><xsl:text> </xsl:text><xsl:value-of select="@value"/>
              </xsl:for-each>
</pre>
          </xsl:when>
          <xsl:otherwise>
            <xsl:copy-of select="node()"/>
          </xsl:otherwise>
        </xsl:choose>
      </li>
    </xsl:for-each>
  </ul>
</xsl:template>
<xsl:template match="node()" mode="overview">
  <xsl:copy>
    <xsl:copy-of select="@*" />
    <xsl:apply-templates select="node()" mode="overview" />
  </xsl:copy>
</xsl:template>

<xsl:template match="newfun|newtok" mode="newfun">
  <dl class="methods">
    <xsl:apply-templates select="*" mode="newfun" />
  </dl>
</xsl:template>
<xsl:template match="function" mode="newfun">
  <dt class="idl-code"><xsl:call-template name="fun_sig"/></dt>
  <dd>
    <xsl:apply-templates select="node()" mode="newfun" />
  </dd>
</xsl:template>
<xsl:template match="param" mode="newfun" />
<xsl:template match="node()" mode="newfun">
  <xsl:copy>
    <xsl:copy-of select="@*" />
    <xsl:apply-templates select="node()" mode="newfun" />
  </xsl:copy>
</xsl:template>

<xsl:template name="fun_sig">
  <xsl:value-of select="@type"/><xsl:text> </xsl:text>
  <xsl:value-of select="@name"/><xsl:text>(</xsl:text>
  <xsl:for-each select="param">
    <xsl:value-of select="@type"/>
    <xsl:if test="@name">
      <xsl:text> </xsl:text>
      <xsl:value-of select="@name"/>
    </xsl:if>
    <xsl:if test="not(position()=last())">, </xsl:if>
  </xsl:for-each>
  <xsl:text>)</xsl:text>
</xsl:template>

<xsl:template match="revision">
  <p>Revision <xsl:value-of select="position()"/>, <xsl:value-of select="@date"/></p>
  <ul>
    <xsl:for-each select="change">
      <li><xsl:copy-of select="node()"/></li>
    </xsl:for-each>
  </ul>
</xsl:template>

</xsl:stylesheet>
