<?xml version="1.0"?>
<!--AUTOGENERATED FILE - DO NOT EDIT - SEE Makefile-->
<registry><extension href="OES_standard_derivatives/"><name>OES_standard_derivatives</name><number>4</number><history><revision date="2010/01/13" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/12/07" number="2">
      <change>Added <code>genType</code> argument and return type to function declarations.</change>
    </revision><revision date="2012/01/03" number="3">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><extension href="OES_texture_float/"><name>OES_texture_float</name><number>1</number><history><revision date="2010/11/29" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2010/12/13" number="2">
      <change>Extended to support pixel type FLOAT for texImage2D and texSubImage2D entry points taking ImageData, HTMLImageElement, HTMLCanvasElement and HTMLVideoElement.
      </change>
    </revision><revision date="2011/09/12" number="3">
      <change>Added optional ability to use a FLOAT type texture as an FBO's color attachment.
      </change>
    </revision><revision date="2012/01/03" number="4">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><extension href="OES_texture_half_float/"><name>OES_texture_half_float</name><number>2</number><history><revision date="2010/11/29" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/09/12" number="2">
      <change>
        Added similar text about <code>texImage2D</code> and <code>texSubImage2D</code> as in OES_texture_float spec.
      </change>
      <change>
        Added optional ability to use a HALF_FLOAT_OES type texture as an FBO's color attachment.
      </change>
    </revision><revision date="2012/01/03" number="3">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><draft href="OES_vertex_array_object/"><name>OES_vertex_array_object</name><number>5</number><history><revision date="2011/01/27" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/11/12" number="2">
      <change>Demotion to draft.</change>
    </revision><revision date="2011/12/06" number="3">
      <change>Added vendor-specific name strings for draft extension per discussion on WebGL mailing list.</change>
    </revision><revision date="2011/12/07" number="4">
      <change>Renamed "Name Strings" section to "Alias Name Strings".</change>
      <change>Sorted Revision History in ascending order.</change>
    </revision><revision date="2012/01/03" number="5">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></draft><draft href="WEBGL_lose_context/"><name>WEBGL_lose_context</name><number>3</number><history><revision date="2011/01/11" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/04/14" number="2">
      <change>Added explicit restoreContext() method based on discussion on public_webgl list, to enable testing of scenario where context stays lost for a period of time.</change>
    </revision><revision date="2011/11/08" number="3">
      <change>Renamed from WEBKIT_lose_context to WEBGL_EXT_lose_context</change>
    </revision><revision date="2011/11/11" number="4">
      <change>Changed to make it clear this extension should follow the WebGL spec for the steps involved in handling losing and restoring the context rather than just fire events.</change>
    </revision><revision date="2011/12/06" number="5">
      <change>Added vendor-specific name strings for draft extension per discussion on WebGL mailing list</change>
      <change>Renamed from WEBGL_EXT_lose_context to WEBGL_lose_context</change>
    </revision><revision date="2011/12/07" number="6">
      <change>Renamed "Name Strings" section to "Alias Name Strings".</change>
    </revision><revision date="2012/01/03" number="7">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></draft><extension href="WEBGL_debug_renderer_info/"><name>WEBGL_debug_renderer_info</name><number>6</number><history><revision date="2011/10/03" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/10/12" number="2">
      <change>Assigned enums; assigned webgl extension number.</change>
    </revision><revision date="2011/10/18" number="3">
      <change>Clarify the meaning of "privileged".</change>
    </revision><revision date="2011/12/07" number="4">
      <change>Fixed mistake where extension still indicated draft status.</change>
    </revision><revision date="2012/01/03" number="5">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><extension href="WEBGL_debug_shaders/"><name>WEBGL_debug_shaders</name><number>7</number><history><revision date="2011/10/03" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/10/14" number="2">
      <change>Assigned WebGL extension number.</change>
    </revision><revision date="2011/10/18" number="3">
      <change>Clarify the meaning of "privileged".</change>
    </revision><revision date="2011/12/07" number="4">
      <change>Fixed mistake where extension still indicated draft status.</change>
      <change>Renamed "New Functions and Methods" section to "New Functions".</change>
    </revision><revision date="2012/01/03" number="5">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><draft href="proposals/WEBGL_compressed_texture_s3tc/"><name>WEBGL_compressed_texture_s3tc</name><number>8</number><history><revision date="2012/01/25" number="1">
      <change>Initial revision.</change>
    </revision></history></draft>
  WEBGL_depth_texture
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Members of the WebGL working group
    Florian BÃ¶sch
  
  9
  
    
  
  
    
      Cube maps may not be used as depth textures.
    
    
      
        The texImage2D and texSubImage2D entry points are extended to accept the format parameter DEPTH_COMPONENT
      
      
        The texImage2D entry point is extended to accept the internalFormat parameter DEPTH_COMPONENT
      
      
        The texImage2D and texSubImage2D entry points are extended to accept the type parameter UNSIGNED_SHORT and UNSIGNED_INT
      
      
        The framebufferTexture2D entry point is extended to accept a target parameter DEPTH_ATTACHMENT
      
      
        The texImage2D and texSubImage2D entry points are extended to accept ArrayBufferView of type Uint16Array and Uint32Array
      
    
  
  
interface WEBGL_depth_texture {
    const GLenum DEPTH_COMPONENT = 0x1902;
    const GLenum UNSIGNED_SHORT  = 0x1403;
    const GLenum UNSIGNED_INT    = 0x1405;
};
  
  
    
        The error INVALID_OPERATION is generated if the format parameter is is DEPTH_COMPONENT and the target is TEXTURE_CUBE_MAP_{POSITIVE,NEGATIVE}_{X,Y,Z}
    
  
  
    
      Initial revision.
    
    
      Added provisions to exclude cube depth textures.
    
    
      Changed referenced WebGL API version from 2.0 to 1.0
    
  

  WEBGL_shared_resources
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Members of the WebGL working group
  
  12
  
    
  
  
    
      This extension adds the ability to share WebGL resources across contexts.
    
    
      
        
        Adds a new context creation parameter:
        
            shareGroup
                
                    Default: undefined. If the value is set to the group
                    attribute from the WEBGL_shared_resources object from an existing context
                    then resources from the existing context are shared with the newly created context.
                
        
        
        
var canvas1 = document.createElement("canvas");
var canvas2 = document.createElement("canvas");
var ctx1 = canvas1.getContext("webgl");
var sharedResourcesExtension = ctx1.getExtension("WEBGL_shared_resources");
var ctx2 = canvas2.getContext("webgl", {
    shareGroup: sharedResourcesExtension.group
});
        
      
      
      All WebGLTexture, WebGLRenderbuffer, WebGLBuffer,
      WebGLShader and WebGLProgram objects are shared among contexts in the
      same share group.
      WebGLFramebuffer objects are expliclity
      not shared as their behavior is undefined per OpenGL ES 2.0 spec Appendix C.
      
      
      All shared objects effectively belong to the WebGLShareGroup, not to the WebGLRenderingContext.
      As such they can be used with any WebGLRenderingContext in the same share group. Errors generated
      when an object is not from the same context must be changed to generate an error if the object
      is not from the same group.
      
    
  
  
    
      
          Q: Should WEBGL_lose_context loseContext lose all contexts in the group?
          A: Yes, and restoreContext should restore all contexts which are restorable.
      
      
          Q: Should a WebGLUniformLocation be usable across contexts?
          A: Yes. They don't seem need to be tied to a context. Rather they are tied
                  to a particular WebGLProgram.
      
      
          Q: How should deletions of WebGLBuffers be handled?
          A: The OpenGL ES 2.0 specifies that deleted buffers have undefined behavior.
                  WebGL implementations must enforce a more consistent reference counted like
                  behavior and if necessary do their own ref counting and not actually
                  call DeleteBuffer until all references across all contexts have been released.
          
      
      
          Q: Does a WebGL implementation need to take any special care to ensure changes to resources in one context
                  are seen in another context.
          A: Maybe? The OpenGL ES 2.0 spec Appendix C.2.3 seems to makes it clear that changes to
                  a resource in one context are not guarnteed to be seen in another context
                  unless flush is called in the context making the change and
                  bind??? for the resource in question is called in the
                  context that wants to observe the change. A context may see the change
                  before binding but is only guaranteed to see the change after binding.
                  Unfortunately there are undefined implicit flushes in WebGL, usually by
                  the browser's compositor. The differences on when those flushes happen will
                  mean developers not calling flush directly will see different behaivor
                  on different browsers.
      
      
          Q: How do you tell if 2 contexts are sharing resources
          A: Compare their groups.
          
function inSameGroup(context1, context2) {
  var sharedResourcesExtension1 = context1.getExtension("WEBGL_shared_resources");
  var sharedResourcesExtension2 = context2.getExtension("WEBGL_shared_resources");
  return sharedResourcesExtension1.group === sharedResourcesExtension2.group;
}
          
          
      
    
  
  
interface WEBGL_shared_resources {
    readonly attribute WebGLShareGroup group;
};

interface WebGLShareGroup {
};
  
  
    
      Initial revision.
    
  

  OES_element_index_uint
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Members of the WebGL working group
    Florian BÃ¶sch
  
  10
  
    
  
  
    
    
      
        The drawElements entry point parameter type accepts the value UNSIGNED_INT
      
    
  
  
interface OES_element_index_uint {
  const GLenum UNSIGNED_INT = 0x1405;
};
  
  
    
      Initial revision.
    
    
      Removed the bufferData requirement as this is not checked by webgl
    
  

  EXT_texture_filter_anisotropic
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Members of the WebGL working group
    Florian BÃ¶sch (pyalot 'at' gmail.com)
  
  11
  
    
  
  
    
    
      
        The getTexParameter, texParameterf and texParameteri entry points'
        parameter pname accepts the value TEXTURE_MAX_ANISOTROPY
      
      
        The getParameter entry point parameter pname accepts the value MAX_TEXTURE_MAX_ANISOTROPY, returning a value of type float.
      
    
  
  
interface EXT_texture_filter_anisotropic {
  const GLenum TEXTURE_MAX_ANISOTROPY     = 0x84FE;
  const GLenum MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
};
  
  
    
      Initial revision.
    
  
</registry>
