<?xml version="1.0"?>
<!--AUTOGENERATED FILE - DO NOT EDIT - SEE Makefile-->
<registry><extension href="OES_standard_derivatives/"><name>OES_standard_derivatives</name><number>4</number><history><revision date="2010/01/13" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/12/07" number="2">
      <change>Added <code>genType</code> argument and return type to function declarations.</change>
    </revision><revision date="2012/01/03" number="3">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><extension href="OES_texture_float/"><name>OES_texture_float</name><number>1</number><history><revision date="2010/11/29" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2010/12/13" number="2">
      <change>Extended to support pixel type FLOAT for texImage2D and texSubImage2D entry points taking ImageData, HTMLImageElement, HTMLCanvasElement and HTMLVideoElement.
      </change>
    </revision><revision date="2011/09/12" number="3">
      <change>Added optional ability to use a FLOAT type texture as an FBO's color attachment.
      </change>
    </revision><revision date="2012/01/03" number="4">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><extension href="OES_texture_half_float/"><name>OES_texture_half_float</name><number>2</number><history><revision date="2010/11/29" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/09/12" number="2">
      <change>
        Added similar text about <code>texImage2D</code> and <code>texSubImage2D</code> as in OES_texture_float spec.
      </change>
      <change>
        Added optional ability to use a HALF_FLOAT_OES type texture as an FBO's color attachment.
      </change>
    </revision><revision date="2012/01/03" number="3">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><draft href="OES_vertex_array_object/"><name>OES_vertex_array_object</name><number>5</number><history><revision date="2011/01/27" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/11/12" number="2">
      <change>Demotion to draft.</change>
    </revision><revision date="2011/12/06" number="3">
      <change>Added vendor-specific name strings for draft extension per discussion on WebGL mailing list.</change>
    </revision><revision date="2011/12/07" number="4">
      <change>Renamed "Name Strings" section to "Alias Name Strings".</change>
      <change>Sorted Revision History in ascending order.</change>
    </revision><revision date="2012/01/03" number="5">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></draft><draft href="WEBGL_lose_context/"><name>WEBGL_lose_context</name><number>3</number><history><revision date="2011/01/11" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/04/14" number="2">
      <change>Added explicit restoreContext() method based on discussion on public_webgl list, to enable testing of scenario where context stays lost for a period of time.</change>
    </revision><revision date="2011/11/08" number="3">
      <change>Renamed from WEBKIT_lose_context to WEBGL_EXT_lose_context</change>
    </revision><revision date="2011/11/11" number="4">
      <change>Changed to make it clear this extension should follow the WebGL spec for the steps involved in handling losing and restoring the context rather than just fire events.</change>
    </revision><revision date="2011/12/06" number="5">
      <change>Added vendor-specific name strings for draft extension per discussion on WebGL mailing list</change>
      <change>Renamed from WEBGL_EXT_lose_context to WEBGL_lose_context</change>
    </revision><revision date="2011/12/07" number="6">
      <change>Renamed "Name Strings" section to "Alias Name Strings".</change>
    </revision><revision date="2012/01/03" number="7">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></draft><extension href="WEBGL_debug_renderer_info/"><name>WEBGL_debug_renderer_info</name><number>6</number><history><revision date="2011/10/03" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/10/12" number="2">
      <change>Assigned enums; assigned webgl extension number.</change>
    </revision><revision date="2011/10/18" number="3">
      <change>Clarify the meaning of "privileged".</change>
    </revision><revision date="2011/12/07" number="4">
      <change>Fixed mistake where extension still indicated draft status.</change>
    </revision><revision date="2012/01/03" number="5">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><extension href="WEBGL_debug_shaders/"><name>WEBGL_debug_shaders</name><number>7</number><history><revision date="2011/10/03" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2011/10/14" number="2">
      <change>Assigned WebGL extension number.</change>
    </revision><revision date="2011/10/18" number="3">
      <change>Clarify the meaning of "privileged".</change>
    </revision><revision date="2011/12/07" number="4">
      <change>Fixed mistake where extension still indicated draft status.</change>
      <change>Renamed "New Functions and Methods" section to "New Functions".</change>
    </revision><revision date="2012/01/03" number="5">
      <change>Removed webgl module per changes to Web IDL spec.</change>
    </revision></history></extension><draft href="WEBGL_compressed_texture_s3tc/"><name>WEBGL_compressed_texture_s3tc</name><number>8</number><history><revision date="2012/01/25" number="1">
      <change>Initial revision.</change>
    </revision></history></draft><draft href="OES_depth_texture/"><name>OES_depth_texture</name><number>9</number><history><revision date="2012/01/23" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2012/01/25" number="2">
      <change>Added provisions to exclude cube depth textures.</change>
    </revision><revision date="2012/02/06" number="3">
      <change>Changed referenced WebGL API version from 2.0 to 1.0</change>
    </revision><revision date="2012/02/24" number="4">
      <change>Removed the enumerants from the IDL which are contained in the context and added aliases to the extension name</change>
    </revision><revision date="2012/03/01" number="5">
      <change>
        Renamed with OES prefix and removed the addendum due to expected harmonization between OES_depth_texture and ARB_depth_texture
        (depth cube maps).
      </change>
    </revision></history></draft>
  WEBGL_shared_resources
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Members of the WebGL working group
  
  12
  
    
  
  
    
      This extension adds the ability to share WebGL resources across contexts.
    
    
      
        
        Adds a new context creation parameter:
        
            shareGroup
                
                    Default: undefined. If the value is set to the group
                    attribute from the WEBGL_shared_resources object from an existing context
                    then resources from the existing context are shared with the newly created context.
                
        
        
        
var canvas1 = document.createElement("canvas");
var canvas2 = document.createElement("canvas");
var ctx1 = canvas1.getContext("webgl");
var sharedResourcesExtension = ctx1.getExtension("WEBGL_shared_resources");
var ctx2 = canvas2.getContext("webgl", {
    shareGroup: sharedResourcesExtension.group
});
        
      
      
      All WebGLTexture, WebGLRenderbuffer, WebGLBuffer,
      WebGLShader and WebGLProgram objects are shared among contexts in the
      same share group.
      WebGLFramebuffer objects are expliclity
      not shared as their behavior is undefined per OpenGL ES 2.0 spec Appendix C.
      
      
      All shared objects effectively belong to the WebGLShareGroup, not to the WebGLRenderingContext.
      As such they can be used with any WebGLRenderingContext in the same share group. Errors generated
      when an object is not from the same context must be changed to generate an error if the object
      is not from the same group.
      
    
  
  
    
      
          Q: Should WEBGL_lose_context loseContext lose all contexts in the group?
          A: Yes, and restoreContext should restore all contexts which are restorable.
      
      
          Q: Should a WebGLUniformLocation be usable across contexts?
          A: Yes. They don't seem need to be tied to a context. Rather they are tied
                  to a particular WebGLProgram.
      
      
          Q: How should deletions of WebGLBuffers be handled?
          A: The OpenGL ES 2.0 specifies that deleted buffers have undefined behavior.
                  WebGL implementations must enforce a more consistent reference counted like
                  behavior and if necessary do their own ref counting and not actually
                  call DeleteBuffer until all references across all contexts have been released.
          
      
      
          Q: Does a WebGL implementation need to take any special care to ensure changes to resources in one context
                  are seen in another context.
          A: Maybe? The OpenGL ES 2.0 spec Appendix C.2.3 seems to makes it clear that changes to
                  a resource in one context are not guarnteed to be seen in another context
                  unless flush is called in the context making the change and
                  bind??? for the resource in question is called in the
                  context that wants to observe the change. A context may see the change
                  before binding but is only guaranteed to see the change after binding.
                  Unfortunately there are undefined implicit flushes in WebGL, usually by
                  the browser's compositor. The differences on when those flushes happen will
                  mean developers not calling flush directly will see different behaivor
                  on different browsers.
      
      
          Q: How do you tell if 2 contexts are sharing resources
          A: Compare their groups.
          
function inSameGroup(context1, context2) {
  var sharedResourcesExtension1 = context1.getExtension("WEBGL_shared_resources");
  var sharedResourcesExtension2 = context2.getExtension("WEBGL_shared_resources");
  return sharedResourcesExtension1.group === sharedResourcesExtension2.group;
}
          
          
      
    
  
  
interface WEBGL_shared_resources {
    readonly attribute WebGLShareGroup group;
};

interface WebGLShareGroup {
};
  
  
    
      Initial revision.
    
  
<draft href="OES_element_index_uint"><name>OES_element_index_uint</name><number>10</number><history><revision date="2012/01/24" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2012/01/27" number="2">
      <change>Removed the bufferData requirement as this is not checked by webgl</change>
    </revision><revision date="2012/02/24" number="3">
      <change>Removed the enumerants from the IDL which are contained in the context and added aliases to the extension name</change>
    </revision></history></draft><draft href="EXT_texture_filter_anisotropic"><name>EXT_texture_filter_anisotropic</name><number>11</number><history><revision date="2012/01/27" number="1">
      <change>Initial revision.</change>
    </revision><revision date="2012/02/24" number="2">
      <change>Added the EXT suffix to the enumerants and aliases to the extension name</change>
    </revision></history></draft>
  ANGLE_instanced_arrays
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Contributors to ANGLE_instanced_arrays
    Members of the WebGL working group
  
  13
  
    
  
  
    
  
  
interface ANGLE_instanced_arrays {
    const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
    void drawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    void drawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei primcount);
    void vertexAttribDivisorANGLE(GLuint index, GLuint divisor); 
};
  
  
    
      Initial revision.
    
  

  WEBGL_fbo_color_attachments
  
    WebGL working group (public_webgl 'at' khronos.org)
  
  
    Members of the WebGL working group
  
  14
  
    
  
  
    
    This extension adds multiple framebuffer color attachment points. When enabled:
    
    
      
      getParameter accepts MAX_COLOR_ATTACHMENTS and returns a platform dependent value of 1 through 16.
      
      
      framebufferRenderbuffer and framebufferTexture2D accept COLOR_ATTACHMENT0 through COLOR_ATTACHMENT15
      as possible valid attachment parameters. If an attachment greater than or equal to the value returned by getParameter(MAX_COLOR_ATTACHMENTS)
      is specified an INVALID_VALUE error is generated.
      
      
      The WEBGL_fbo_color_attachments preprocessor directive will be defined to 1 for GLSL shaders.
      
      
      The #extension WEBGL_fbo_color_attachments is accepted in GLSL shaders and enables referencing gl_FragData[0] through gl_FragData[n] where n
      is 1 less than the value returned by getParameter(MAX_COLOR_ATTACHMENTS). Referencing gl_FragData[n] where n is greater then the number of supported attachments
      will generate a GLSL compile or linker error.
      
    
  
  
    
      
          Q: Does this extension allow you to render to the backbuffer with multiple render targets?
          A: No, that requires a different extension. This extension only handles framebuffers with multiple render target.
      
      
          Q: Can the multiple attachments be different dimensions?
          A: No. If the set of attachments attached to a framebuffer are not all the same dimensions
                  the WebGL implemention is required to return FRAMEBUFFER_UNSUPPORTED for checkFramebufferStatus
                  and generate INVALID_FRAMEBUFFER_OPERATION for all rendering and reading commands. (eg. drawArrays,
                  drawElements, clear, readPixels, copyTexImage2D, etc..)
          
      
      
          Q: Are any set of possible color attachments required to work?
          A: No. An implementation can reject any set of attachments. For invalid combinations
                  the implemention is required to return FRAMEBUFFER_UNSUPPORTED for checkFramebufferStatus
                  and generate INVALID_FRAMEBUFFER_OPERATION for all rendering and reading commands. (eg. drawArrays,
                  drawElements, clear, readPixels, copyTexImage2D, etc..)
          
      
      
          Q: Are there any restrictions on indexing gl_FragData?
          A: Yes, the same restrictions apply as when referencing uniform sampler arrays as specified in the GLSL Specification 1.0.17 Appendix A Section 5. Specifically
          only constant-index-expressions are allowed.
      
    
  
  
interface WEBGL_fbo_color_attachments {
    const GLenum COLOR_ATTACHMENT0   = 0x8CE0;
    const GLenum COLOR_ATTACHMENT1   = 0x8CE1;
    const GLenum COLOR_ATTACHMENT2   = 0x8CE2;
    const GLenum COLOR_ATTACHMENT3   = 0x8CE3;
    const GLenum COLOR_ATTACHMENT4   = 0x8CE4;
    const GLenum COLOR_ATTACHMENT5   = 0x8CE5;
    const GLenum COLOR_ATTACHMENT6   = 0x8CE6;
    const GLenum COLOR_ATTACHMENT7   = 0x8CE7;
    const GLenum COLOR_ATTACHMENT8   = 0x8CE8;
    const GLenum COLOR_ATTACHMENT9   = 0x8CE9;
    const GLenum COLOR_ATTACHMENT10  = 0x8CEA;
    const GLenum COLOR_ATTACHMENT11  = 0x8CEB;
    const GLenum COLOR_ATTACHMENT12  = 0x8CEC;
    const GLenum COLOR_ATTACHMENT13  = 0x8CED;
    const GLenum COLOR_ATTACHMENT14  = 0x8CEE;
    const GLenum COLOR_ATTACHMENT15  = 0x8CEF;

    const GLenum MAX_COLOR_ATTACHMENTS = 0x8CDF;
};
  
  
    
      Initial revision.
    
  
</registry>
